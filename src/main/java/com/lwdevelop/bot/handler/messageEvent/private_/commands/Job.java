package com.lwdevelop.bot.handler.messageEvent.private_.commands;

import java.util.Iterator;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import com.lwdevelop.bot.utils.Common;
import com.lwdevelop.bot.utils.KeyboardButton;
import com.lwdevelop.dto.JobPostingDTO;
import com.lwdevelop.dto.JobSeekerDTO;
import com.lwdevelop.entity.JobPosting;
import com.lwdevelop.entity.JobSeeker;
import com.lwdevelop.entity.JobUser;
import com.lwdevelop.entity.RobotChannelManagement;
import com.lwdevelop.entity.SpringyBot;
import com.lwdevelop.service.impl.JobManagementServiceImpl;
import com.lwdevelop.service.impl.SpringyBotServiceImpl;
import com.lwdevelop.utils.SpringUtils;

public class Job {
        SendMessage response;

        @Autowired
        private JobManagementServiceImpl jobManagementServiceImpl = SpringUtils.getApplicationContext()
                        .getBean(JobManagementServiceImpl.class);

        @Autowired
        private SpringyBotServiceImpl springyBotServiceImpl = SpringUtils.getApplicationContext()
                        .getBean(SpringyBotServiceImpl.class);

        private void jobMessageSetting(Message message) {
                this.response = new SendMessage();
                this.response.setChatId(String.valueOf(message.getChatId()));
                this.response.setDisableNotification(false);
                this.response.setDisableWebPagePreview(false);
        }

        public void postRecruitment(Common common) {

                // send to channel
                SpringyBot springyBot = springyBotServiceImpl.findById(common.getSpringyBotId()).get();
                Iterator<RobotChannelManagement> iterator = springyBot.getRobotChannelManagement().iterator();
                String userId = String.valueOf(common.getUpdate().getMessage().getChatId());
                springyBot.getJobUser().stream().filter(ju -> ju.getUserId().equals(userId))
                                .findFirst().ifPresent(j -> {
                                        j.getJobPosting().stream().filter(jp -> jp.getUserId().equals(userId))
                                                        .findFirst().ifPresent(
                                                                        jobPosting -> {
                                                                                while (iterator.hasNext()) {
                                                                                        sendTextWithJobPosting(
                                                                                                        jobPosting,
                                                                                                        common,
                                                                                                        iterator.next());
                                                                                }
                                                                        });
                                });
                ;

        }

        public void postAJobSearch(Common common) {
                SpringyBot springyBot = springyBotServiceImpl.findById(common.getSpringyBotId()).get();

                // send to channel
                Iterator<RobotChannelManagement> iterator = springyBot.getRobotChannelManagement()
                                .iterator();
                String userId = String.valueOf(common.getUpdate().getMessage().getChatId());
                springyBot.getJobUser().stream().filter(ju -> ju.getUserId().equals(userId)).findFirst()
                                .ifPresent(j -> {
                                        j.getJobSeeker()
                                                        .stream()
                                                        .filter(
                                                                        jp -> jp.getUserId().equals(userId))
                                                        .findFirst()
                                                        .ifPresent(
                                                                        jobSeeker -> {
                                                                                while (iterator
                                                                                                .hasNext()) {
                                                                                        this.sendTextWithJobSeeker(
                                                                                                        jobSeeker,
                                                                                                        common,
                                                                                                        iterator
                                                                                                                        .next());
                                                                                }
                                                                        });
                                });
                ;
        }

        public void setResponse_jobPosting_management(Common common) {
                this.jobMessageSetting(common.getUpdate().getMessage());

                Long id = common.getSpringyBotId();
                String userId = String.valueOf(common.getUpdate().getMessage().getChatId());
                String firstname = Optional.ofNullable(common.getUpdate().getMessage().getChat().getFirstName())
                                .orElse("");
                String username = Optional.ofNullable(common.getUpdate().getMessage().getChat().getUserName())
                                .orElse("");
                String lastname = Optional.ofNullable(common.getUpdate().getMessage().getChat().getLastName())
                                .orElse("");

                SpringyBot springyBot = springyBotServiceImpl.findById(id).orElseThrow();
                JobPosting jobPosting = jobManagementServiceImpl.findByUserIdAndBotIdWithJobPosting(userId,
                                String.valueOf(id));

                JobUser jobUser = springyBot.getJobUser().stream().filter(j -> j.getUserId().equals(userId)).findFirst()
                                .orElseGet(() -> {
                                        JobUser ju = new JobUser();
                                        ju.setUserId(userId);
                                        springyBot.getJobUser().add(ju);
                                        return ju;
                                });

                jobUser.setFirstname(firstname);
                jobUser.setLastname(lastname);
                jobUser.setUsername(username);

                JobPostingDTO jobPostingDTO = new JobPostingDTO(userId, String.valueOf(id));
                String company = "", position = "", baseSalary = "", commission = "", workTime = "", requirements = "",
                                location = "", flightNumber = "";

                if (jobPosting != null) {
                        company = Optional.ofNullable(jobPosting.getCompany()).orElse("");
                        position = Optional.ofNullable(jobPosting.getPosition()).orElse("");
                        baseSalary = Optional.ofNullable(jobPosting.getBaseSalary()).orElse("");
                        commission = Optional.ofNullable(jobPosting.getCommission()).orElse("");
                        workTime = Optional.ofNullable(jobPosting.getWorkTime()).orElse("");
                        requirements = Optional.ofNullable(jobPosting.getRequirements()).orElse("");
                        location = Optional.ofNullable(jobPosting.getLocation()).orElse("");
                        flightNumber = Optional.ofNullable(jobPosting.getFlightNumber()).orElse("");
                        this.response.setText(
                                        "ÊãõËÅò‰∫∫Êâç\n" + "ÂÖ¨Âè∏Ôºö" + company + "\n" + "ËÅå‰ΩçÔºö" + position + "\n" + "Â∫ïËñ™Ôºö" + baseSalary
                                                        + "\n" + "ÊèêÊàêÔºö" + commission + "\n" + "‰∏äÁè≠Êó∂Èó¥Ôºö" + workTime + "\n"
                                                        + "Ë¶ÅÊ±ÇÂÜÖÂÆπÔºö" + requirements + "\n"
                                                        + "üêå Âú∞ÂùÄÔºö" + location + "\n" + "‚úàÔ∏èÂí®ËØ¢È£ûÊú∫Âè∑Ôºö" + flightNumber);
                        this.response.setReplyMarkup(new KeyboardButton().keyboard_jobPosting(jobPostingDTO));
                        jobPosting.setLastMessageId(common.sendResponseAsync(this.response));
                        jobManagementServiceImpl.saveJobPosting(jobPosting);
                } else {
                        this.response.setText("ÊãõËÅò‰∫∫Êâç\n" + "ÂÖ¨Âè∏Ôºö\n" + "ËÅå‰ΩçÔºö\n" + "Â∫ïËñ™Ôºö\n" + "ÊèêÊàêÔºö\n" + "‰∏äÁè≠Êó∂Èó¥Ôºö\n" + "Ë¶ÅÊ±ÇÂÜÖÂÆπÔºö\n"
                                        + "üêå Âú∞ÂùÄÔºö\n" + "‚úàÔ∏èÂí®ËØ¢È£ûÊú∫Âè∑Ôºö ");
                        this.response.setReplyMarkup(new KeyboardButton().keyboard_jobPosting(jobPostingDTO));
                        JobPosting jp = new JobPosting(userId, String.valueOf(id),
                                        common.sendResponseAsync(this.response));
                        jobUser.getJobPosting().add(jp);
                        jobManagementServiceImpl.saveJobPosting(jp);
                }
                springyBotServiceImpl.save(springyBot);
        }

        public void setResponse_jobSeeker_management(Common common) {
                this.jobMessageSetting(common.getUpdate().getMessage());

                Long id = common.getSpringyBotId();
                String userId = String.valueOf(common.getUpdate().getMessage().getChatId());
                String firstname = Optional.ofNullable(common.getUpdate().getMessage().getChat().getFirstName())
                                .orElse("");
                String username = Optional.ofNullable(common.getUpdate().getMessage().getChat().getUserName())
                                .orElse("");
                String lastname = Optional.ofNullable(common.getUpdate().getMessage().getChat().getLastName())
                                .orElse("");

                SpringyBot springyBot = springyBotServiceImpl.findById(id).orElseThrow();
                JobSeeker jobSeeker = jobManagementServiceImpl.findByUserIdAndBotIdWithJobSeeker(userId,
                                String.valueOf(id));

                JobUser jobUser = springyBot.getJobUser().stream().filter(j -> j.getUserId().equals(userId)).findFirst()
                                .orElseGet(() -> {
                                        JobUser ju = new JobUser();
                                        ju.setUserId(userId);
                                        springyBot.getJobUser().add(ju);
                                        return ju;
                                });

                jobUser.setFirstname(firstname);
                jobUser.setLastname(lastname);
                jobUser.setUsername(username);

                JobSeekerDTO jobSeekerDTO = new JobSeekerDTO(userId, String.valueOf(id));
                String name = "", gender = "", dateOfBirth = "", age = "", nationality = "", education = "",
                                skills = "", targetPosition = "", resources = "", expectedSalary = "",
                                workExperience = "", selfIntroduction = "",flightNumber="";
                if (jobSeeker != null) {
                        name = Optional.ofNullable(jobSeeker.getName()).orElse("");
                        gender = Optional.ofNullable(jobSeeker.getGender()).orElse("");
                        dateOfBirth = Optional.ofNullable(jobSeeker.getDateOfBirth()).orElse("");
                        age = Optional.ofNullable(jobSeeker.getAge()).orElse("");
                        nationality = Optional.ofNullable(jobSeeker.getNationality()).orElse("");
                        education = Optional.ofNullable(jobSeeker.getEducation()).orElse("");
                        skills = Optional.ofNullable(jobSeeker.getSkills()).orElse("");
                        targetPosition = Optional.ofNullable(jobSeeker.getTargetPosition()).orElse("");
                        resources = Optional.ofNullable(jobSeeker.getResources()).orElse("");
                        expectedSalary = Optional.ofNullable(jobSeeker.getExpectedSalary()).orElse("");
                        workExperience = Optional.ofNullable(jobSeeker.getWorkExperience()).orElse("");
                        selfIntroduction = Optional.ofNullable(jobSeeker.getSelfIntroduction()).orElse("");
                        flightNumber = Optional.ofNullable(jobSeeker.getFlightNumber()).orElse("");

                        this.response.setText("Ê±ÇËÅå‰∫∫Âëò\n\nÂßìÂêçÔºö" + name + "\nÁî∑Â•≥Ôºö" + gender + "\nÂá∫Áîü_Âπ¥_Êúà_Êó•Ôºö"
                                        + dateOfBirth
                                        + "\nÂπ¥ÈæÑÔºö" + age + "\nÂõΩÁ±çÔºö" + nationality + "\nÂ≠¶ÂéÜÔºö" + education
                                        + "\nÊäÄËÉΩÔºö" + skills + "\nÁõÆÊ†áËÅå‰ΩçÔºö" + targetPosition + "\nÊâã‰∏äÊúâ‰ªÄ‰πàËµÑÊ∫êÔºö"
                                        + resources + "\nÊúüÊúõËñ™ËµÑÔºö" + expectedSalary + "\nÂ∑•‰ΩúÁªèÂéÜÔºö"
                                        + workExperience + "\nËá™Êàë‰ªãÁªçÔºö" + selfIntroduction +"\nÂí®ËØ¢È£ûÊú∫Âè∑Ôºö" + flightNumber );
                        this.response.setReplyMarkup(new KeyboardButton().keyboard_jobSeeker(jobSeekerDTO));
                        jobSeeker.setLastMessageId(common.sendResponseAsync(this.response));
                        jobManagementServiceImpl.saveJobSeeker(jobSeeker);
                } else {
                        this.response.setText(
                                        "Ê±ÇËÅå‰∫∫Âëò\nÂßìÂêçÔºö\nÁî∑Â•≥Ôºö\nÂá∫Áîü_Âπ¥_Êúà_Êó•Ôºö\nÂπ¥ÈæÑÔºö\nÂõΩÁ±çÔºö\nÂ≠¶ÂéÜÔºö\nÊäÄËÉΩÔºö\nÁõÆÊ†áËÅå‰ΩçÔºö\nÊâã‰∏äÊúâ‰ªÄ‰πàËµÑÊ∫êÔºö\nÊúüÊúõËñ™ËµÑÔºö\nÂ∑•‰ΩúÁªèÂéÜÔºö\nËá™Êàë‰ªãÁªçÔºö\nÂí®ËØ¢È£ûÊú∫Âè∑Ôºö");
                        this.response.setReplyMarkup(new KeyboardButton().keyboard_jobSeeker(jobSeekerDTO));
                        JobSeeker js = new JobSeeker(userId, String.valueOf(id),
                                        common.sendResponseAsync(this.response));
                        jobUser.getJobSeeker().add(js);
                        jobManagementServiceImpl.saveJobSeeker(js);
                }
                springyBotServiceImpl.save(springyBot);
        }

        private void sendTextWithJobSeeker(JobSeeker jobSeeker, Common common,
                        RobotChannelManagement robotChannelManagement) {

                StringBuilder sb = new StringBuilder();
                appendIfNotEmpty(sb, "ÂßìÂêçÔºö", jobSeeker.getName());
                appendIfNotEmpty(sb, "Áî∑Â•≥Ôºö", jobSeeker.getGender());
                appendIfNotEmpty(sb, "Âá∫Áîü_Âπ¥_Êúà_Êó•Ôºö", jobSeeker.getDateOfBirth());
                appendIfNotEmpty(sb, "Âπ¥ÈæÑÔºö", jobSeeker.getAge());
                appendIfNotEmpty(sb, "ÂõΩÁ±çÔºö", jobSeeker.getNationality());
                appendIfNotEmpty(sb, "Â≠¶ÂéÜÔºö", jobSeeker.getEducation());
                appendIfNotEmpty(sb, "ÊäÄËÉΩÔºö", jobSeeker.getSkills());
                appendIfNotEmpty(sb, "ÁõÆÊ†áËÅå‰ΩçÔºö", jobSeeker.getTargetPosition());
                appendIfNotEmpty(sb, "Êâã‰∏äÊúâ‰ªÄ‰πàËµÑÊ∫êÔºö", jobSeeker.getResources());
                appendIfNotEmpty(sb, "ÊúüÊúõËñ™ËµÑÔºö", jobSeeker.getExpectedSalary());
                appendIfNotEmpty(sb, "Â∑•‰ΩúÁªèÂéÜÔºö", jobSeeker.getWorkExperience());
                appendIfNotEmpty(sb, "Ëá™Êàë‰ªãÁªçÔºö", jobSeeker.getSelfIntroduction());
                appendIfNotEmpty(sb, "Âí®ËØ¢È£ûÊú∫Âè∑Ôºö", jobSeeker.getFlightNumber());
                String result = sb.toString().trim(); // ÂéªÊéâÂâçÂêéÁ©∫Ê†º

                SendMessage response = new SendMessage();
                if (!result.isEmpty()) {
                        String username = common.getUpdate().getMessage().getChat().getUserName();
                        response.setChatId(String.valueOf(robotChannelManagement.getChannelId()));
                        response.setText("Ê±ÇËÅå‰∫∫Âëò\n\n" + result);
                        response.setReplyMarkup(new KeyboardButton().keyboard_callme(username));
                        common.sendResponseAsync(response);
                }else{
                        Long chatId = common.getUpdate().getMessage().getChatId();
                        response.setChatId(String.valueOf(chatId));
                        response.setText("Â∞öÊú™ÁºñËæëÊãõËÅòË°®Âçï");
                        common.sendResponseAsync(response);  
                }

        }

        private void sendTextWithJobPosting(JobPosting jobPosting, Common common,
                        RobotChannelManagement robotChannelManagement) {
                StringBuilder sb = new StringBuilder();
                appendIfNotEmpty(sb, "ÂÖ¨Âè∏Ôºö", jobPosting.getCompany());
                appendIfNotEmpty(sb, "ËÅå‰ΩçÔºö", jobPosting.getPosition());
                appendIfNotEmpty(sb, "Â∫ïËñ™Ôºö", jobPosting.getBaseSalary());
                appendIfNotEmpty(sb, "ÊèêÊàêÔºö", jobPosting.getCommission());
                appendIfNotEmpty(sb, "‰∏äÁè≠Êó∂Èó¥Ôºö", jobPosting.getWorkTime());
                appendIfNotEmpty(sb, "Ë¶ÅÊ±ÇÂÜÖÂÆπÔºö", jobPosting.getRequirements());
                appendIfNotEmpty(sb, "üêå Âú∞ÂùÄÔºö", jobPosting.getLocation());
                appendIfNotEmpty(sb, "‚úàÔ∏èÂí®ËØ¢È£ûÊú∫Âè∑Ôºö", jobPosting.getFlightNumber());
                String result = sb.toString().trim(); // ÂéªÊéâÂâçÂêéÁ©∫Ê†º

                SendMessage response = new SendMessage();
                if (!result.isEmpty()) {
                        String username = common.getUpdate().getMessage().getChat().getUserName();
                        response.setChatId(String.valueOf(robotChannelManagement.getChannelId()));
                        response.setText("ÊãõËÅò‰∫∫Êâç\n\n" + result);
                        response.setReplyMarkup(new KeyboardButton().keyboard_callme(username));
                        common.sendResponseAsync(response);
                }else{
                        Long chatId = common.getUpdate().getMessage().getChatId();
                        response.setChatId(String.valueOf(chatId));
                        response.setText("Â∞öÊú™ÁºñËæëÊãõËÅòË°®Âçï");
                        common.sendResponseAsync(response);   
                }
        }

        private void appendIfNotEmpty(StringBuilder sb, String label, String value) {
                if (value != null && !value.isEmpty()) {
                        sb.append(label).append(value).append("\n");
                }
        }

}
